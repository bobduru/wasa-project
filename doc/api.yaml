openapi: 3.0.0
servers:
  - url: "http://localhost:3000"
info:
  title: WASAPhoto
  description: Keep in touch with your friends by sharing photos of special moments, thanks to WASAPhoto! You can upload your photos directly from your PC, and they will be visible to everyone following you.
  version: 1.0.0
security:
  - BearerAuth: []

paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      security: []
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                name:
                  type: string
                  pattern: '^[a-zA-Z0-9]+$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        '201':
            description: User log-in action successful
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    identifier:
                      type: string
                      pattern: '^[a-zA-Z0-9]+$'
                      example: "abcdef012345"
                      minLength: 3
                      maxLength: 16
  /users/name:
    put:
      summary: User can update their name
      operationId: setMyUserName
      description: updating user's name
      tags: ["user"]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                name:
                  $ref: "#/components/schemas/plainString"
      responses:
        '200':
          description: Name set successfully
          content:
              application/json:
                schema:
                  type: object
                  properties:
                    updated_name:
                      $ref: '#/components/schemas/plainString'
        '401':
          description: Unauthorized - User not authenticated
  /photos/:
    post:
      summary: Upload Photo
      description: uploading a photo
      operationId: uploadPhoto
      tags: ["photo"]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              additionalProperties: false
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  minLength: 0
                  maxLength: 10000000
      responses:
        '201':
          description: Photo uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'
        '400':
          description: Bad Request - Invalid file format or size
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/plainString'
        '401':
          description: Unauthorized - User not authenticated    
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/plainString' 
    delete:
      summary: Delete Photo
      operationId: deletePhoto
      description: deleting a photo
      tags: ["photo"]
      parameters:
        - in: query
          name: photoId
          schema:
            $ref: "#/components/schemas/idString"
          required: true
      security:
        - BearerAuth: []  
      responses:
        '204':
          description: Photo deleted successfully
        '400':
          description: Bad Request - Invalid photo ID or photo not found

  /users/{userId}/followers/:
    parameters:
            - name: userId
              in: path
              required: true
              schema:
                $ref: "#/components/schemas/idString"
    post:
      summary: Logged in user follows another
      description: following a user
      operationId: followUser
      tags: ["user"]
      
      security:
        - BearerAuth: []
      responses:
        '201':
          description: User followed successfully
          content:
            application/json: 
              schema:
                type: object
                description: User followed successfully
                additionalProperties: false
                properties:
                  message:
                    $ref: "#/components/schemas/plainString"
        '400':
          description: Bad Request - Invalid user ID or user not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/plainString'
        '401':
          description: Unauthorized - User not authenticated
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/plainString'
        '403':
          description: User does not have the rights
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/plainString'
        "406":
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/plainString'
          
    delete:
      summary: Logged in user unfollows another
      operationId: unfollowUser
      description: unfollowing a user
      tags: ["user"]
      security:
        - BearerAuth: []
      responses:
        '204':
          description: User unfollowed successfully
        '400':
          description: Bad Request - Invalid user ID or user not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/plainString'
        '401':
          description: Unauthorized - User not authenticated
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/plainString'
        '403':
          description: User does not have the rights
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/plainString'
        
        "406":
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/plainString'
  /users/{userId}/bans/:
    parameters:
          - name: userId
            in: path
            required: true
            schema:
              $ref: "#/components/schemas/idString"
    post:
      summary: Logged in user bans another user
      description: banning a user
      operationId: banUser
      tags: ["user"]
      security:
        - BearerAuth: []
      
      
      responses:
        '201':
          description: User banned successfully
          content:
            application/json: 
              schema:
                description: User banned successfully
                type: object
                additionalProperties: false
                properties:
                  message:
                    $ref: "#/components/schemas/plainString"
        '400':
          description: Bad Request - Invalid user ID or user not found
        '401':
          description: Unauthorized - User not authenticated
    delete:
        summary: Logged in user unbans another user
        operationId: unbanUser
        description: unbanning a user
        tags: ["user"]
        security:
        - BearerAuth: []
        responses:
          '204':
            description: User unbanned successfully
          '400':
            description: Bad Request - Invalid user ID or user not found
          '401':
            description: Unauthorized - User not authenticated
  /users/{userId}:
      get:
        summary: Get User Profile
        operationId: getUserProfile
        description: getting a user's profile
        tags: ["user"]
        security: []
        parameters:
          - name: userId
            in: path
            required: true
            schema:
              $ref: "#/components/schemas/idString"
        responses:
          '200':
            description: User profile retrieved successfully
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    userId:
                      type: string
                      pattern: '^[a-zA-Z0-9]+$'
                      minLength: 0
                      maxLength: 16
                    username:
                      type: string
                      pattern: '^[a-zA-Z0-9]+$'
                      minLength: 3
                      maxLength: 16
                    photos:
                      type: array
                      minItems: 0
                      maxItems: 50
                      items:
                        $ref: '#/components/schemas/Photo'
                    followers:
                      type: array
                      minItems: 0
                      maxItems: 50
                      items:
                        type: object
                        properties:
                          userId:
                            schema:
                              $ref: "#/components/schemas/idString"
                          username:
                            schema:
                              $ref: "#/components/schemas/plainString"
                    following:
                      type: array
                      minItems: 0
                      maxItems: 50
                      items:
                        type: object
                        properties:
                          userId:
                            schema:
                              $ref: "#/components/schemas/idString"
                          username:
                            schema:
                              $ref: "#/components/schemas/plainString"
          '404':
            description: User not found
  /stream/:
    get:
      summary: User gets stream
      description: getting a user's stream
      operationId: getMyStream
      tags: ["photo"]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Stream retrieved successfully
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                maxItems: 50

                items:
                  $ref: '#/components/schemas/Photo'
  
  /photos/{photoId}/likes/:
    parameters:
            - name: photoId
              in: path
              required: true
              schema:
                $ref: "#/components/schemas/idString"
    post:
      summary: Like Photo
      operationId: likePhoto
      tags: ["photo"]
      description: Adds a like to the specified photo, effectively increasing the like count.
      security:
        - BearerAuth: []  
      responses:
        '201':
          description: Photo liked successfully
          content:
            application/json: 
              schema:
                description: Photo liked successfully
                type: object
                additionalProperties: false
                properties:
                  message:
                    $ref: "#/components/schemas/plainString"
        '400':
          description: Bad Request - Invalid photo ID or photo not found
        '401':
          description: Unauthorized - User not authenticated
    delete:
      summary: Unlike Photo
      operationId: unlikePhoto
      description: deleting a like from a photo
      tags: ["photo"]
      security:
        - BearerAuth: []  
      responses:
        '204':
          description: Photo unliked successfully
        '400':
          description: Bad Request - Invalid photo ID or photo not found
        '401':
          description: Unauthorized - User not authenticated

  /comments:
    post:
      summary: Comment on Photo
      operationId: commentPhoto
      description: andding a comment on photo
      tags: ["comment"]
      parameters:
        - in: query
          name: photoId
          schema:
            $ref: "#/components/schemas/idString"
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                comment:
                  $ref: "#/components/schemas/plainString"
      security:
        - BearerAuth: []  
      responses:
        '201':
          description: Comment added successfully
          content:
              application/json:
                schema:
                  type: object
                  additionalProperties: false
                  properties:
                    userId:
                      $ref: "#/components/schemas/plainString"
                    id:
                      $ref: "#/components/schemas/plainString"
                    imageId:
                      $ref: "#/components/schemas/plainString"
                    text:
                      $ref: "#/components/schemas/plainString"
                    CreateTime:
                      $ref: "#/components/schemas/plainString"
        '400':
          description: Bad Request - Invalid photo ID or photo not found
        '401':
          description: Unauthorized - User not authenticated
    delete:
      summary: Remove Comment from Photo
      operationId: uncommentPhoto
      description: deleting a comment from a photo
      tags: ["photo"]
      parameters:
        - in: query
          name: commentId
          schema:
            $ref: "#/components/schemas/idString"
          required: true
      security:
        - BearerAuth: []  
      responses:
        '204':
          description: Comment removed successfully
        '400':
          description: Bad Request - Invalid photo ID, photo not found, or comment not found


components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: string
      description: The user identifier (User id) obtained after logging in. Include it in the Authorization header.
  schemas:
    plainString:
      description: a plain string schema
      type: string
      pattern: '^[a-zA-Z0-9]$' 
      minLength: 0
      maxLength: 100 
    idString:
      description: schema for an id string
      type: string
      pattern: '^[0-9]+$'
      minLength: 0
      maxLength: 30
    Photo:
      type: object
      description: Schema representing a photo uploaded by the user.
      additionalProperties: false
      properties:
        image:
          type: string
          pattern: '^[a-zA-Z0-9]+$'
          minLength: 0
          maxLength: 100
          description: Unique identifier for the image.
        photoId:
          type: string
          pattern: '^[a-zA-Z0-9]+$'
          minLength: 0
          maxLength: 100
          description: Unique identifier for the photo.
        uploadDate:
          type: string
          pattern: '^[a-zA-Z0-9]+$'
          minLength: 0
          maxLength: 100
          description: The date when the photo was uploaded.
        likes:
          type: integer
          description: The number of likes this photo has received.
        comments:
          type: array
          description: A list of comments on the photo.
          minItems: 0
          maxItems: 50
          items:
            type: string
            pattern: '^[a-zA-Z0-9]+$'
            minLength: 0
            maxLength: 400
            description: Comment text.

